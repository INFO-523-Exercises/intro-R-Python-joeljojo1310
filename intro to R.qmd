---
title: "exercise 1- into to R"
format: html
editor: visual
author: "Joel Jojo"
---

## Summary for the exercise

This exercise provides an introduction to R. It covers all the basic commands in R language, data structures, and packages.

This serves as a warm-up to get familiarized with the R language as well as the technologies such as PositCloud and GitHub.

#### Checking the version of R

```{r}
R.version

```

#### DMwR2: Functions and Data for the Second Edition of "Data Mining with R"

```{r}
install.packages("DMwR2")
```

```{r}
help(package="DMwR2")

```

```{r}
library(DMwR2)
```

#### Loading the algae dataset

```{r}
data(algae) 
algae  
```

#### Finding rows with too many NAs

```{r}
manyNAs(algae) 

```

```{r}
library()
```

####  Below command used to list all the currently loaded packages in your R session

```{r}
(.packages())
```

```{r}
install.packages("dbplyr") # assuming you have dbplyr installed before 

# now you try to check out dplyr, but typed dbplyr by accident
library(dbplyr) 
(.packages())
# you realized the mistake, and you don't want this package to be live in this session due to potential conflicts
# you can detach the package
detach("package:dbplyr", unload=TRUE) 
(.packages())
    
library(dplyr)#load wanted library
```

#### Checking the list of installed packages 

```{r}
installed.packages() 
```

```{r}
old.packages()
```

#### Used to update all installed packages to their latest versions

```{r,error=TRUE}
update.packages(ask = FALSE)
```

#### When you want to see if a package you need to use has already been made

```{r}
RSiteSearch('neural networks')
```

#### Used to show the current workign directory and to set the working directory

```{r}
getwd()
```

```{r}
setwd("/cloud/project")
```

#### Below code covers the use of variables and arithmetic operators

```{r}
vat <- 0.2
```

```{r}
vat
```

```{r}
(vat <- 0.2)
```

```{r}
x <- 5
y <- vat * x
y
```

```{r}
z <-(y/2)^2
y
```

```{r}
z
```

#### ls() and objects() lists the variables created or currently in use

```{r}
ls()

```

```{r}
objects()
```

#### Removes a variable to save space

```{r}
rm(vat)
```

#### Below functions help carry out certain operations such as mean and max from a list or from a sample

```{r}
max(4, 5, 6, 12, -4)
```

```{r}
mean(4, 5, 6, 12, -4)
```

```{r}
max(sample(1:100, 30))
```

```{r}
mean(sample(1:100, 30))
```

```{r}
help(sample)
```

#### set.seed() function helps generate random numbers in a controlled environment

```{r}
set.seed(1) #the seed determines the starting point used in generating a sequence of pseudo random numbers #set.seed() has global scope, meaning it affects all random number generators used/called in your program.
#there is a function to remove the seed:rm(.Random.seed, envir=.GlobalEnv)

rnorm(1) #give me one number from a normal distribution
```

```{r}
rnorm(1)
```

```{r}
set.seed(2)
rnorm(1)
```

```{r}
rnorm(1)
```

#### Checking if an object by the name "se" exists

```{r}
exists("se")
```

#### Creating a function that generates the standard error of a sample

```{r}
se <- function(x){
  variance <- var(x)
  n <-length(x)
  return (sqrt(variance/n))
}
```

```{r}
exists("se")
```

#### Function to convert length in meters to other measures of length and a few operations surrounding the function

```{r}
convMeters <- function (x, to="inch"){
  factor = switch(to, inch=39.3701, foot=3.28084, yard=1.09361, mile=0.000621371, NA)
  if(is.na(factor)) stop ("unknown target unit")
  else return (x*factor)
}
convMeters(23, "foot")
```

```{r}
convMeters(40)
```

```{r}
convMeters(56.2, "yard")
```

```{r}
convMeters(to="yard", 56.2)
```

#### Factors and operations for the same

```{r}
g <-c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f')
g <- factor(g)
```

```{r}
other.g <-factor(c('m', 'm', 'm', 'm'), levels= c('f', 'm'))
other.g
```

```{r}
other.g <-factor(c('m', 'm', 'm', 'm'))
other.g
```

```{r}
g <- factor(c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f'))
table(g)
```

```{r,error=TRUE}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile'))
table(a, g)
```

```{r}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile', 'juvenile'))
t <- table(a, g)
t
```

```{r}
margin.table(t, 1)#1 refers to the first factor, a (age)
```

```{r}
margin.table(t, 2)# now find the marginal freq of the second factor g
```

```{r}
t
```

```{r}
prop.table(t, 1) #use the margin generated for the 1st factor a 
```

```{r}
prop.table(t, 2)
```

```{r}
prop.table(t) #overall
```

```{r}
prop.table(t) * 100
```

### Data Structures

### Vectors

#### Creating a vector

```{r}
v <- c(2, 5, 3, 4)
length(v)
```

#### Checking the data type of the elements in the vector

```{r}
mode(v)
```

#### Mixing strings and numbers makes it in to a string vector

```{r}
v <- c(2, 5, 3, 4, 'me')
mode(v)
```

```{r}
v
```

#### Missing vakues can be substituted with NA

```{r}
v <- c(2, 5, 3, 4, NA)
mode(v)
```

```{r}
v
```

#### Boolean values can be added to the vector as well

```{r}
b <- c(TRUE, FALSE, NA, TRUE)
mode(b)
```

```{r}
b
```

#### Few other operations surrounding vectors

```{r}
b[3]
```

```{r}
b[3] <- TRUE
b
```

```{r}
b[10] <- FALSE
b
```

```{r}
e <-vector()
mode(e)
```

```{r}
e <- c()
mode(e)
```

```{r}
length(e)
```

```{r}
b2 <-c(b[1], b[3], b[5])
b2
```

```{r}
sqrt(v)
```

#### Vector arithmetic

```{r}
v1 <- c(3, 6, 9)
v2 <- c(1, 4, 8)
v1+v2 #addition
```

```{r}
v1*v2 #dot product
```

```{r}
v1-v2 #subtraction
```

```{r}
v1/v2 #divsion
```

```{r,error=TRUE}
v3 <- c(1, 4)
v1+v3#the recycling rule makes v3 [1, 4, 1]
```

```{r}
2*v1
```

#### Function to add the numbers in a vector and return the sum

```{r}
mysum <- function (x){
  sum <- 0
  for(i in 1:length(x)){
    sum <- sum + x[i]
  }
  return (sum)
}

(mysum (c(1, 2, 3)))
```

#### () helps print the output of the code in the console

```{r}
(x <-1:10)
```

```{r}
(x <-10:1)
```

```{r}
10:15-1

```

```{r}
10:(15-1)
```

```{r}
(seq(from=1, to=5, length=4)) # 4 values between 1 and 5 inclusive, even intervals/steps
```

#### rep(x,n) displays x, the value, n  number of times

```{r}
(rep(5, 10))
```

```{r}
(rep("hi", 3))
```

```{r}
(rep(1:2, 3))
```

```{r}
(rep(TRUE:FALSE, 3))
```

```{r}
(rep(1:2, each=3))
```

#### gl(x,n,m) displays x levels, repeats it n number of times  and generates m number of values

```{r}
gl(3, 5) #three levels, each repeat 5 times
```

```{r}
gl(2, 5, labels= c('female', 'male'))#two levels, each level repeat 5 times
```

```{r}
#first argument 2 says two levels. 
#second argument 1 says repeat once
#third argment 20 says generate 20 values
gl(2, 1, 20, labels=c('female', 'male'))#10 alternating female and male pairs, a total of 20 values.
```

```{r}
n <- rep(1:2, each=3)
(n <- factor(n, 
             levels = c(1, 2),
             labels = c('female','male')
             ))
```

```{r}
n
```

```{r}
(rnorm(10, mean=10, sd=3))
```

```{r}
(rt(10, df=5)) #10 values following a Student T distribution with degree of freedom of 5

```

### **Sub-setting**

#### Flexible ways of select values from a vector

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
#select all elements that is greater than 0
(gtzero <- x[x>0])


```

#### Use `|` (or), and `&` (and) operators:

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[x<=-2 | x>5])        
```

#### Use a vector index:

```{r}
(x[x>40 & x<100])
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[c(4, 6)])#select the 4th and 6th elements in the vector
```

```{r}
(y<-c(4,6)) #same as above
```

```{r}
(x[y])
```

```{r}
(x[1:3]) #select the 1st to the 3rd elements in the vector
```

#### Use negative index to exclude elements:

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[-1]) #select all but the first element
```

```{r}
(x[-c(4, 6)])
```

```{r}
(x[-(1:3)])
```

### **Named elements**

Elements in a vector can have names.

Assign names to vector elements

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
names(x) <- c('s1', 's2', 's3', 's4', 's5', 's6', 's7')
x
```

#### Create a vector with named elements:

```{r}
(pH <- c(area1=4.5, area2=5.7, area3=9.8, mud=7.2))
```

#### Use individual names to reference/select elements:

```{r}
pH['mud']
```

```{r}
pH[c('area1', 'mud')]
```

#### ...but can not use directly element names to exclude or select a range of elements:

```{r,error=TRUE}
x[-s1] #results in error
```

```{r,error=TRUE}
x[-"s1"] #results in error
```

```{r,error=TRUE}
x[s1:s7] #results in error
```

```{r,error=TRUE}
x[c('s1':'s7')] #results in error
```

#### Empty index means to select all:

```{r}
pH[]
```

```{r}
pH
```

#### Use this method to reset a vector to 0:

```{r}
pH[] <- 0
pH
```

```{r}
pH<- 0
pH
```

#### Matrices

To create a matrix:

```{r}
m <- c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23)
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.array(m)
```

```{r}
#then 'organize' the vector as a matrix
dim(m) <-c(2, 5)#make the vector a 2 by 5 matrix, 2x5 must = lenght of the vector
m
```

```{r}
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.array(m)
```

#### By default, the elements are put in matrix by columns. Use `byrow=TRUE` to do it the other way:

```{r}
(m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5, byrow = TRUE))
```

#### Creating a matrix with two columns which stores age and grades

```{r}
test <-matrix(c(11, 11, 12, 13, 14, 9, 8, 5, 5, 6, 7, 8, 4, 3), 7, 2)
test
```

#### Access matrix elements using position indexes

```{r}
m <- c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23)
#then 'organize' the vector as a matrix
dim(m) <- c(2, 5)#make the vector a 2 by 5 matrix, 2x5 must = lenght of the vector
m
```

```{r}
m[2, 3]#the element at row 2 and column 3
```

#### Sub-setting a matrix is similar to sub-setting on a vector.

The result is a value (a value is a vector), a vector, or a matrix:

```{r}
(s<- m[2, 1]) # select one value
```

```{r}
(m<- m [c(1,2), -c(3, 5)]) #select 1st row and 1st, 2nd, and 4th columns: result is a vector
```

```{r}
(m [1, ]) #select complete row or column: 1st row, result is a vector
```

```{r}
(v<-m [, 1]) # 1st column, result is a vector
```

```{r}
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.vector(s)
```

```{r}
is.vector(v)
```

```{r}
is.matrix(v)
```

#### Use `drop = FALSE` to keep the results as a matrix (not vectors like shown above)

```{r}
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5)
(m<-m [, 2, drop = FALSE])
```

```{r}
is.matrix(m)
```

#### `cbind()` and `rbind()`: join together two or more vectors or matrices, by column, or by row, respectively:

```{r}
cbind (c(1,2,3), c(4, 5, 6))
```

```{r}
rbind (c(1,2,3), c(4, 5, 6))
```

```{r}
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5)
(a <- rbind (c(1,2,3,4,5), m))
```

```{r}
is.array(a)
```

```{r}
is.matrix(a)
```

```{r}
m1 <- matrix(rep(10, 9), 3, 3)
m2 <- cbind(c(1, 2, 3), c(4, 5, 6))


```

```{r}
m3 <- cbind(m1[, 1], m2[, 2])




```

```{r}
m4 <- cbind(m1[, 1], m2[, 2])
```

```{r}
sales <- matrix(c(10, 30, 40, 50, 43, 56, 21, 30), 2, 4, byrow=TRUE)
colnames(sales) <- c('1qrt', '2qrt', '3qrt', '4qrt')
rownames(sales) <- c('store1', 'store2')
sales
```

```{r}
sales['store1', '1qrt']
```

```{r}
sales['store2', c('1qrt', '4qrt')]
```

#### Arrays

Arrays are similar to matrices, but arrays can have more than 2 dimensions

3-D array:

```{r}
a <- array(1:48, dim= c(4, 3, 2))
a
```

#### Select array elements using indexes, results may be a value, a vector, a matrix or an array, depending on the use of `drop=FALSE`:

```{r}
a [1, 3, 2]
```

```{r}
a [1, , 2]
```

```{r}
a [1, , 2, drop=FALSE]
```

```{r}
a [4, 3, ]
```

```{r}
a [c(2, 3), , -2]
```

#### Assign names to dimensions of an array.

`[[]]` selects one dimension:

```{r}
dimnames(a)[[1]] <-c("1qrt", "2qrt", "3qrt", "4qrt")
dimnames(a)[[2]] <-c("store1", "store2", "store3")
dimnames(a)[[3]] <-c("2017", "2018")
a
```

#### Alternatively, use `list()` to specify names:

```{r}
ar <- array(data     = 1:27,
            dim      = c(3, 3, 3),
            dimnames = list(c("a", "b", "c"),                                                                    c("d", "e", "f"),                                                                       c("g", "h", "i")))
ar
```

#### Split array into matrices

Perform arithmetic operations on matrices, note the recycling rules apply:

```{r}
matrix1 <- ar[,,g]
```

```{r}
matrix1 <- ar[,,'g']
matrix1
```

```{r}
matrix2 <- ar[,,'h']
matrix2
```

```{r}
sum <-matrix1 + matrix2
sum
```

```{r}
matrix1*3
```

```{r}
matrix1
```

```{r,error=TRUE}
matrix1*c(2, 3)
```

```{r}
matrix1*c(2,3,2,3,2,3,2,3,2)
```

```{r}
matrix1*c(1, 2, 3)
```

```{r}
matrix1/c(1, 2, 3)
```

```{r}
matrix1/c(1, 2, 3, 1, 2, 3, 1, 2, 3)
```

#### Lists

Lists are vectors too, but they are \'recursive\'

Use `list$component_name` to access a component in a *list* can not be used on atomic vectors.

```{r}
mylist <- list(stud.id=34453,
               stud.name="John",
               stud.marks= c(13, 3, 12, 15, 19)
               )

mylist$stud.id
```

```{r}
mylist[1]
```

```{r}
mylist[[1]]
```

```{r}
mylist["stud.id"]
```

```{r}
handle <- "stud.id"
mylist[handle]
```

```{r}
mylist[["stud.id"]]
```

### **Subset with `[`**

### **Extract one item with `[[`**

### **Interact with `$`**

```{r}
mylist <- list(stud.id=34453,
               stud.name="John",
               stud.marks= c(13, 3, 12, 15, 19)
               )
mylist$stud.marks
```

```{r}
mylist$stud.marks[2]
```

Change names:

```{r}
names(mylist)
```

```{r}
names(mylist) <- c('id','name','marks')

names(mylist)
```

```{r}
mylist
```

Add new component:

```{r}
mylist$parents.names <- c('Ana', "Mike")
mylist
```

Use `c()` to concatenate two lists:

```{r}
newlist <- list(age=19, sex="male");
expandedlist <-c(mylist, newlist)
expandedlist
```

```{r}
length(expandedlist)
```

```{r}
expandedlist <- expandedlist[-5]
expandedlist <- expandedlist[c(-1,-5)]
expandedlist$parents.names <- NULL
expandedlist[['marks']] <- NULL
```

```{r}
mylist
```

```{r}
unlist(mylist)
```

```{r}
mode(mylist)
```

```{r}
mode(unlist(mylist))
```

```{r}
is.vector(unlist(mylist)) #atomic list with names
```

```{r}
is.list(mylist)
```

```{r}
is.atomic(mylist)
```

```{r}
is.list(unlist(mylist))
```

## **Data Frames**

The recommended data structure for tables (2-D), data frames are a special kind of list: each row is an observation, each column is an attribute.

Create a dataframe

```{r}
my.dataframe <- data.frame(site=c('A', 'B', 'A','A', 'B'),
                           season=c('winter', 'summer', 'summer', 'spring', 'fall'),                               ph = c(7.4, 6.3, 8.6, 7.2, 8.9))
my.dataframe
```

### **Indexes and names**

```{r}
my.dataframe <- data.frame(site=c('A', 'B', 'A','A', 'B'),
                           season=c('winter', 'summer', 'summer', 'spring', 'fall'),                               ph = c(7.4, 6.3, 8.6, 7.2, 8.9))
my.dataframe[3, 2]
```

```{r}
my.dataframe[['site']]
```

```{r}
my.dataframe['site']
```

```{r}
my.dataframe[my.dataframe$ph>7, ]
```

```{r}
my.dataframe[my.dataframe$ph>7, 'site']
```

```{r}
my.dataframe[my.dataframe$ph>7, c('site', 'ph')]
```

### **Use `subset()` to query a data frame**

`subset()` can only query, it can not be used to change values in the data frame:

```{r}
subset(my.dataframe, ph>7)
```

```{r}
subset(my.dataframe, ph>7, c("site", "ph"))
```

```{r}
subset(my.dataframe[1:2,], ph>7, c(site, ph))
```

To change values in data frame - add 1 to `summer` `ph`:

```{r}
my.dataframe[my.dataframe$season=='summer', 'ph'] <- my.dataframe[my.dataframe$season=='summer', 'ph'] + 1 
                                                                  my.dataframe[my.dataframe$season=='summer', 'ph']
```

```{r}
my.dataframe[my.dataframe$season=='summer' & my.dataframe$ph>8, 'ph'] <- my.dataframe[my.dataframe$season=='summer' & my.dataframe$ph>8, 'ph'] + 1                                                              
        
my.dataframe[my.dataframe$season=='summer', 'ph']                             
```

### **Add a column**

```{r}
my.dataframe$NO3 <- c(234.5, 123.4, 456.7, 567.8, 789.0)
my.dataframe
```

To remove a column

```{r}
#my.dataframe$NO3<-NULL
my.dataframe <- my.dataframe[, -4]
my.dataframe
```

To check the structure of the data frame

```{r}
str(my.dataframe)
```

```{r}
nrow(my.dataframe)
```

```{r}
ncol(my.dataframe)
```

```{r}
dim(my.dataframe)
```

To edit a data frame

```{r,error=TRUE}
 edit(my.dataframe) #this brings up a data editor

 View(my.dataframe) #this brings up a uneditable tab that display the data for you to view.
```

to update name of the columns

```{r}
names(my.dataframe)
```

```{r}
names(my.dataframe) <- c('area', 'season', 'P.h.')
my.dataframe
```

```{r}
names(my.dataframe)[3] <- 'ph'
my.dataframe 
```

### Tibbles

```{r}
install.packages("tibble")
                                                                  library(tibble)
```

#### Create a tibble

```{r}
my.tibble <- tibble(TempCels = sample(-10:40, size=100, replace=TRUE), 
                    TempFahr = TempCels*9/5+32,
                    Location = rep(letters[1:2], each=50))
my.tibble
```

Use the penguins data frame from the `palmerpenguins` package:

```{r}
install.packages("palmerpenguins")
library(palmerpenguins)
data(penguins)
dim(penguins)
class(penguins)
penguins
```

### **Convert a data frame to a tibble**

```{r}
pe <-as_tibble(penguins)
class(pe)
```

```{r}
pe
```

```{r}
x <- 1:16
mode(x)
```

```{r}
dim(x) <- c(4,4)
class(x) 
```

```{r}
is.numeric(x)
```

```{r}
mode(x) <- "character"
mode(x)
```

```{r}
class(x)
```

```{r}
x <- factor(x)
class(x)
```

```{r}
mode(x)
```

A set of \`is.xxx()\` functions can be used to check the data structure of an object

```{r}
is.array(x)
```

```{r}
is.list(x)
```

```{r}
is.data.frame(x)
```

```{r}
is.matrix(x)
```

```{r}
is_tibble(x)
```

```{r}
is.vector(x)
```

```{r}
typeof(x)
```

Subsetting a tibble results in a smaller tibble

```{r}
class(pe[1:15, c("bill_length_mm", "bill_depth_mm")])
```

```{r}
class(penguins[1:15, c("bill_length_mm", "bill_depth_mm")])
```

```{r}
class(pe[1:15, c("bill_length_mm")])
```

```{r}
class(penguins[1:15, c("bill_length_mm")])
```

```{r}
install.packages("dplyr")
library(dplyr)
```

```{r}
select(filter(pe, species=="Adelie"), bill_length_mm, bill_depth_mm)
```

```{r}
filter(select(pe, bill_length_mm, bill_depth_mm, species), species=="Adelie")
```

```{r}
pe
```

```{r}
pe[pe$species=='Adelie', c("bill_length_mm", "bill_depth_mm")]
```

```{r}
subset(pe, pe$species=='Adelie', c("bill_length_mm", "bill_depth_mm"))
```

```{r}
select(pe, bill_length_mm, bill_depth_mm, species) |> filter(species=="Adelie")
```

```{r}
filter(pe, species=="Adelie") |> select(bill_length_mm, bill_depth_mm, species)
```

```{r}
students <- list(names=c("Judy", "Max", "Dan"),
                 grades=c(78, 85, 99))
print ("before:")
```

```{r}
students
```

```{r}
gradeConvertor<- function (grade){
  grade = as.numeric(grade)
  if(grade > 100 | grade < 0) print ("grade out of the range")
  else if(grade >= 90 & grade <= 100) return ("A")
  else if(grade >= 80 & grade < 90) return ("B")
  else if(grade >= 70 & grade < 80) return ("C")
  else return ("F")
}

#students$grades <-sapply(students$grades, gradeConvertor)

for(i in 1:length(students$grades)){
  students$grades[i] = gradeConvertor(students$grades[i])
}

print ("after:")
```

```{r}
students
```
