---
title: "exercise 1- into to R"
format: html
editor: visual
author: "Joel Jojo"
---

## Summary

This exercise provides an introduction to R. It covers all the basic commands to use R language and packages.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
R.version

```

```{r}
install.packages("DMwR2")
```

```{r}
help(package="DMwR2")

```

```{r}
library(DMwR2)
```

```{r}
data(algae) # load algae dataset
algae  
```

```{r}
manyNAs(algae) # find rows with too many NAs
```

```{r}
library()
```

```{r}
(.packages())
```

```{r}
install.packages("dbplyr") # assuming you have dbplyr installed before 

# now you try to check out dplyr, but typed dbplyr by accident
library(dbplyr) 
(.packages())
# you realized the mistake, and you don't want this package to be live in this session due to potential conflicts
# you can detach the package
detach("package:dbplyr", unload=TRUE) 
(.packages())
    
library(dplyr)#load wanted library
```

```{r}
installed.packages() 
```

```{r}
old.packages()
```

```{r}
update.packages(ask = FALSE)
```

```{r}
RSiteSearch('neural networks')
```

```{r}
save(my.function, mydataset, file="path_to_mysession.RData")
load("path_to_mysession.RData")
```

```{r}
getwd()
```

```{r}
setwd("/cloud/project")
```

```{r}
vat <- 0.2
```

```{r}
vat
```

```{r}
(vat <- 0.2)
```

```{r}
x <- 5
y <- vat * x
y
```

```{r}
z <-(y/2)^2
y
```

```{r}
z
```

```{r}
ls()

```

```{r}
objects()
```

```{r}
rm(vat)
```

```{r}
max(4, 5, 6, 12, -4)
```

```{r}
mean(4, 5, 6, 12, -4)
```

```{r}
max(sample(1:100, 30))
```

```{r}
mean(sample(1:100, 30))
```

```{r}
help(sample)
```

```{r}
set.seed(1) #the seed determines the starting point used in generating a sequence of pseudo random numbers #set.seed() has global scope, meaning it affects all random number generators used/called in your program.
#there is a function to remove the seed:rm(.Random.seed, envir=.GlobalEnv)

rnorm(1) #give me one number from a normal distribution
```

```{r}
rnorm(1)
```

```{r}
set.seed(2)
rnorm(1)
```

```{r}
rnorm(1)
```

```{r}
exists("se")
```

```{r}
se <- function(x){
  variance <- var(x)
  n <-length(x)
  return (sqrt(variance/n))
}
```

```{r}
exists("se")
```

```{r}
convMeters <- function (x, to="inch"){
  factor = switch(to, inch=39.3701, foot=3.28084, yard=1.09361, mile=0.000621371, NA)
  if(is.na(factor)) stop ("unknown target unit")
  else return (x*factor)
}
convMeters(23, "foot")
```

```{r}
convMeters(40)
```

```{r}
convMeters(56.2, "yard")
```

```{r}
convMeters(to="yard", 56.2)
```

```{r}
g <-c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f')
g <- factor(g)
```

```{r}
other.g <-factor(c('m', 'm', 'm', 'm'), levels= c('f', 'm'))
other.g
```

```{r}
other.g <-factor(c('m', 'm', 'm', 'm'))
other.g
```

```{r}
g <- factor(c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f'))
table(g)
```

```{r}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile'))
table(a, g)
```

```{r}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile', 'juvenile'))
t <- table(a, g)
t
```

```{r}
margin.table(t, 1)#1 refers to the first factor, a (age)
```

```{r}
margin.table(t, 2)# now find the marginal freq of the second factor g
```

```{r}
t
```

```{r}
prop.table(t, 1) #use the margin generated for the 1st factor a 
```

```{r}
prop.table(t, 2)
```

```{r}
prop.table(t) #overall
```

```{r}
prop.table(t) * 100
```

```{r}
v <- c(2, 5, 3, 4)
length(v)
```

```{r}
mode(v)
```

```{r}
v <- c(2, 5, 3, 4, 'me')
mode(v)
```

```{r}
v
```

```{r}
v <- c(2, 5, 3, 4, NA)
mode(v)
```

```{r}
v
```

```{r}
b <- c(TRUE, FALSE, NA, TRUE)
mode(b)
```

```{r}
b
```

```{r}
b[3]
```

```{r}
b[3] <- TRUE
b
```

```{r}
b[10] <- FALSE
b
```

```{r}
e <-vector()
mode(e)
```

```{r}
e <- c()
mode(e)
```

```{r}
length(e)
```

```{r}
b2 <-c(b[1], b[3], b[5])
b2
```

```{r}
sqrt(v)
```

```{r}
v1 <- c(3, 6, 9)
v2 <- c(1, 4, 8)
v1+v2 #addition
```

```{r}
v1*v2 #dot product
```

```{r}
v1-v2 #subtraction
```

```{r}
v1/v2 #divsion
```

```{r}
v3 <- c(1, 4)
v1+v3#the recycling rule makes v3 [1, 4, 1]
```

```{r}
2*v1
```

```{r}
mysum <- function (x){
  sum <- 0
  for(i in 1:length(x)){
    sum <- sum + x[i]
  }
  return (sum)
}

(mysum (c(1, 2, 3)))
```

```{r}
(x <-1:10)
```

```{r}
(x <-10:1)
```

```{r}
10:15-1

```

```{r}
10:(15-1)
```

```{r}
(seq(from=1, to=5, length=4)) # 4 values between 1 and 5 inclusive, even intervals/steps
```

```{r}
(rep(5, 10))
```

```{r}
(rep("hi", 3))
```

```{r}
(rep(1:2, 3))
```

```{r}
(rep(TRUE:FALSE, 3))
```

```{r}
(rep(1:2, each=3))
```

```{r}
gl(3, 5) #three levels, each repeat 5 times
```

```{r}
gl(2, 5, labels= c('female', 'male'))#two levels, each level repeat 5 times
```

```{r}
#first argument 2 says two levels. 
#second argument 1 says repeat once
#third argment 20 says generate 20 values
gl(2, 1, 20, labels=c('female', 'male'))#10 alternating female and male pairs, a total of 20 values.
```

```{r}
n <- rep(1:2, each=3)
(n <- factor(n, 
             levels = c(1, 2),
             labels = c('female','male')
             ))
```

```{r}
n
```

```{r}
(rnorm(10, mean=10, sd=3))
```

```{r}
(rt(10, df=5)) #10 values following a Student T distribution with degree of freedom of 5

```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
#select all elements that is greater than 0
(gtzero <- x[x>0])

```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[x<=-2 | x>5])        
```

```{r}
(x[x>40 & x<100])
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[c(4, 6)])#select the 4th and 6th elements in the vector
```

```{r}
(y<-c(4,6)) #same as above
```

```{r}
(x[y])
```

```{r}
(x[1:3]) #select the 1st to the 3rd elements in the vector
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[-1]) #select all but the first element
```

```{r}
(x[-c(4, 6)])
```

```{r}
(x[-(1:3)])
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
names(x) <- c('s1', 's2', 's3', 's4', 's5', 's6', 's7')
x
```

```{r}
(pH <- c(area1=4.5, area2=5.7, area3=9.8, mud=7.2))
```

```{r}
pH['mud']
```

```{r}
pH[c('area1', 'mud')]
```

```{r}
x[-s1] #results in error
```

```{r}
x[-"s1"] #results in error
```

```{r,error=TRUE}
x[s1:s7] #results in error
```

```{r}
x[c('s1':'s7')] #results in error
```

```{r}
pH[]
```

```{r}
pH
```

```{r}
pH[] <- 0
pH
```

```{r}
pH<- 0
pH
```

```{r}
m <- c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23)
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.array(m)
```

```{r}
#then 'organize' the vector as a matrix
dim(m) <-c(2, 5)#make the vector a 2 by 5 matrix, 2x5 must = lenght of the vector
m
```

```{r}
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.array(m)
```

```{r}
(m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5, byrow = TRUE))
```

```{r}
test <-matrix(c(11, 11, 12, 13, 14, 9, 8, 5, 5, 6, 7, 8, 4, 3), 7, 2)
test
```
